#coding:utf-8

'''
    有效的数独：
        判断一个 9x9的数独是否有效，只需要根据以下规则，验证已经填入的数字是否有效即可

        1. 数字 1-9 在每行中只能出现一次
        2. 数字 1-9 在每列中只能出现一次
        3. 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
    数独部分空格内已填入了数字，空白格用 '.' 表示。

    示例：

        输入:
        [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
        ]
        输出: true

'''

class Solution(object):
    def isValidSudoku(self, board):
        """
        :type board: List[List[str]]
        :rtype: bool
        """
        
        row = [{},{},{},{},{},{},{},{},{},{}]
        col = [{},{},{},{},{},{},{},{},{},{}]
        cell = [{},{},{},{},{},{},{},{},{},{}]

        # 对每一行进行遍历
        for i in range(9):
            # 对每一列进行遍历
            for j in range(9):
                num = (3*(i//3) + j//3)  #找单元              
                temp = board[i][j]

                if temp != ".":
                    if temp not in row[i] and temp not in col[j] and temp not in cell[num]:
                        row [i][temp] = 1
                        col [j][temp] = 1
                        cell [num][temp] = 1
                    else:
                        return False
        return True



if __name__ == '__main__':
    board = [
        ["5","3",".",".","7",".",".",".","."],
        ["6",".",".","1","9","5",".",".","."],
        [".","9","8",".",".",".",".","6","."],
        ["8",".",".",".","6",".",".",".","3"],
        ["4",".",".","8",".","3",".",".","1"],
        ["7",".",".",".","2",".",".",".","6"],
        [".","6",".",".",".",".","2","8","."],
        [".",".",".","4","1","9",".",".","5"],
        [".",".",".",".","8",".",".","7","9"]
    ]
    a = Solution()
    print(a.isValidSudoku(board))
    